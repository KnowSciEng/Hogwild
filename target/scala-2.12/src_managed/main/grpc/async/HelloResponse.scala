// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package grpc.async

@SerialVersionUID(0L)
final case class HelloResponse(
    workersDetails: _root_.scala.collection.Seq[grpc.async.WorkerDetail] = _root_.scala.collection.Seq.empty,
    weights: scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Double] = scala.collection.immutable.Map.empty,
    id: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[HelloResponse] with scalapb.lenses.Updatable[HelloResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      workersDetails.foreach(workersDetails => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(workersDetails.serializedSize) + workersDetails.serializedSize)
      weights.foreach(weights => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(grpc.async.HelloResponse._typemapper_weights.toBase(weights).serializedSize) + grpc.async.HelloResponse._typemapper_weights.toBase(weights).serializedSize)
      if (id != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, id) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      workersDetails.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      weights.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(grpc.async.HelloResponse._typemapper_weights.toBase(__v).serializedSize)
        grpc.async.HelloResponse._typemapper_weights.toBase(__v).writeTo(_output__)
      };
      {
        val __v = id
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): grpc.async.HelloResponse = {
      val __workersDetails = (_root_.scala.collection.immutable.Vector.newBuilder[grpc.async.WorkerDetail] ++= this.workersDetails)
      val __weights = (scala.collection.immutable.Map.newBuilder[_root_.scala.Int, _root_.scala.Double] ++= this.weights)
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __workersDetails += _root_.scalapb.LiteParser.readMessage(_input__, grpc.async.WorkerDetail.defaultInstance)
          case 18 =>
            __weights += grpc.async.HelloResponse._typemapper_weights.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, grpc.async.HelloResponse.WeightsEntry.defaultInstance))
          case 24 =>
            __id = _input__.readUInt32()
          case tag => _input__.skipField(tag)
        }
      }
      grpc.async.HelloResponse(
          workersDetails = __workersDetails.result(),
          weights = __weights.result(),
          id = __id
      )
    }
    def clearWorkersDetails = copy(workersDetails = _root_.scala.collection.Seq.empty)
    def addWorkersDetails(__vs: grpc.async.WorkerDetail*): HelloResponse = addAllWorkersDetails(__vs)
    def addAllWorkersDetails(__vs: TraversableOnce[grpc.async.WorkerDetail]): HelloResponse = copy(workersDetails = workersDetails ++ __vs)
    def withWorkersDetails(__v: _root_.scala.collection.Seq[grpc.async.WorkerDetail]): HelloResponse = copy(workersDetails = __v)
    def clearWeights = copy(weights = scala.collection.immutable.Map.empty)
    def addWeights(__vs: (_root_.scala.Int, _root_.scala.Double)*): HelloResponse = addAllWeights(__vs)
    def addAllWeights(__vs: TraversableOnce[(_root_.scala.Int, _root_.scala.Double)]): HelloResponse = copy(weights = weights ++ __vs)
    def withWeights(__v: scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Double]): HelloResponse = copy(weights = __v)
    def withId(__v: _root_.scala.Int): HelloResponse = copy(id = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => workersDetails
        case 2 => weights.map(grpc.async.HelloResponse._typemapper_weights.toBase)(_root_.scala.collection.breakOut)
        case 3 => {
          val __t = id
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(workersDetails.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PRepeated(weights.map(grpc.async.HelloResponse._typemapper_weights.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PInt(id)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = grpc.async.HelloResponse
}

object HelloResponse extends scalapb.GeneratedMessageCompanion[grpc.async.HelloResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[grpc.async.HelloResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): grpc.async.HelloResponse = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    grpc.async.HelloResponse(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[grpc.async.WorkerDetail]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[grpc.async.HelloResponse.WeightsEntry]].map(grpc.async.HelloResponse._typemapper_weights.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[grpc.async.HelloResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      grpc.async.HelloResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[grpc.async.WorkerDetail]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[grpc.async.HelloResponse.WeightsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(grpc.async.HelloResponse._typemapper_weights.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AsyncProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AsyncProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = grpc.async.WorkerDetail
      case 2 => __out = grpc.async.HelloResponse.WeightsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.grpc.async.HelloResponse.WeightsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = grpc.async.HelloResponse(
  )
  @SerialVersionUID(0L)
  final case class WeightsEntry(
      key: _root_.scala.Int = 0,
      value: _root_.scala.Double = 0.0
      ) extends scalapb.GeneratedMessage with scalapb.Message[WeightsEntry] with scalapb.lenses.Updatable[WeightsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key) }
        if (value != 0.0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, value) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0.0) {
            _output__.writeDouble(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): grpc.async.HelloResponse.WeightsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = _input__.readUInt32()
            case 17 =>
              __value = _input__.readDouble()
            case tag => _input__.skipField(tag)
          }
        }
        grpc.async.HelloResponse.WeightsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Int): WeightsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Double): WeightsEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0.0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => _root_.scalapb.descriptors.PDouble(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = grpc.async.HelloResponse.WeightsEntry
  }
  
  object WeightsEntry extends scalapb.GeneratedMessageCompanion[grpc.async.HelloResponse.WeightsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[grpc.async.HelloResponse.WeightsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): grpc.async.HelloResponse.WeightsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      grpc.async.HelloResponse.WeightsEntry(
        __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(1), 0.0).asInstanceOf[_root_.scala.Double]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[grpc.async.HelloResponse.WeightsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        grpc.async.HelloResponse.WeightsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = grpc.async.HelloResponse.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = grpc.async.HelloResponse.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = grpc.async.HelloResponse.WeightsEntry(
    )
    implicit class WeightsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, grpc.async.HelloResponse.WeightsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, grpc.async.HelloResponse.WeightsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[grpc.async.HelloResponse.WeightsEntry, (_root_.scala.Int, _root_.scala.Double)] =
      _root_.scalapb.TypeMapper[grpc.async.HelloResponse.WeightsEntry, (_root_.scala.Int, _root_.scala.Double)](__m => (__m.key, __m.value))(__p => grpc.async.HelloResponse.WeightsEntry(__p._1, __p._2))
  }
  
  implicit class HelloResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, grpc.async.HelloResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, grpc.async.HelloResponse](_l) {
    def workersDetails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[grpc.async.WorkerDetail]] = field(_.workersDetails)((c_, f_) => c_.copy(workersDetails = f_))
    def weights: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Int, _root_.scala.Double]] = field(_.weights)((c_, f_) => c_.copy(weights = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val WORKERSDETAILS_FIELD_NUMBER = 1
  final val WEIGHTS_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  @transient
  private val _typemapper_weights: _root_.scalapb.TypeMapper[grpc.async.HelloResponse.WeightsEntry, (_root_.scala.Int, _root_.scala.Double)] = implicitly[_root_.scalapb.TypeMapper[grpc.async.HelloResponse.WeightsEntry, (_root_.scala.Int, _root_.scala.Double)]]
}
