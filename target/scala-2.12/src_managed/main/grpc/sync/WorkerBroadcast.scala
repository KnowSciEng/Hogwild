// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package grpc.sync

@SerialVersionUID(0L)
final case class WorkerBroadcast(
    myId: _root_.scala.Int = 0,
    msg: _root_.scala.Predef.String = "",
    port: _root_.scala.Int = 0,
    counter: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[WorkerBroadcast] with scalapb.lenses.Updatable[WorkerBroadcast] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (myId != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, myId) }
      if (msg != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, msg) }
      if (port != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, port) }
      if (counter != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, counter) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = myId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = msg
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = port
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
      {
        val __v = counter
        if (__v != 0) {
          _output__.writeUInt32(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): grpc.sync.WorkerBroadcast = {
      var __myId = this.myId
      var __msg = this.msg
      var __port = this.port
      var __counter = this.counter
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __myId = _input__.readUInt32()
          case 18 =>
            __msg = _input__.readString()
          case 24 =>
            __port = _input__.readUInt32()
          case 32 =>
            __counter = _input__.readUInt32()
          case tag => _input__.skipField(tag)
        }
      }
      grpc.sync.WorkerBroadcast(
          myId = __myId,
          msg = __msg,
          port = __port,
          counter = __counter
      )
    }
    def withMyId(__v: _root_.scala.Int): WorkerBroadcast = copy(myId = __v)
    def withMsg(__v: _root_.scala.Predef.String): WorkerBroadcast = copy(msg = __v)
    def withPort(__v: _root_.scala.Int): WorkerBroadcast = copy(port = __v)
    def withCounter(__v: _root_.scala.Int): WorkerBroadcast = copy(counter = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = myId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = msg
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = port
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = counter
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(myId)
        case 2 => _root_.scalapb.descriptors.PString(msg)
        case 3 => _root_.scalapb.descriptors.PInt(port)
        case 4 => _root_.scalapb.descriptors.PInt(counter)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = grpc.sync.WorkerBroadcast
}

object WorkerBroadcast extends scalapb.GeneratedMessageCompanion[grpc.sync.WorkerBroadcast] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[grpc.sync.WorkerBroadcast] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): grpc.sync.WorkerBroadcast = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    grpc.sync.WorkerBroadcast(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[grpc.sync.WorkerBroadcast] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      grpc.sync.WorkerBroadcast(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SyncProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SyncProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = grpc.sync.WorkerBroadcast(
  )
  implicit class WorkerBroadcastLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, grpc.sync.WorkerBroadcast]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, grpc.sync.WorkerBroadcast](_l) {
    def myId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.myId)((c_, f_) => c_.copy(myId = f_))
    def msg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.msg)((c_, f_) => c_.copy(msg = f_))
    def port: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.port)((c_, f_) => c_.copy(port = f_))
    def counter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.counter)((c_, f_) => c_.copy(counter = f_))
  }
  final val MY_ID_FIELD_NUMBER = 1
  final val MSG_FIELD_NUMBER = 2
  final val PORT_FIELD_NUMBER = 3
  final val COUNTER_FIELD_NUMBER = 4
}
